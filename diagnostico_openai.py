#!/usr/bin/env python3
"""
Diagn√≥stico para verificar configura√ß√£o OpenAI
"""

import os
from dotenv import load_dotenv

def diagnosticar_openai():
    print("üîç DIAGN√ìSTICO OPENAI")
    print("=" * 40)
    
    # Carregar .env
    load_dotenv()
    
    # Verificar chave
    api_key = os.getenv("OPENAI_API_KEY")
    model = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
    
    print(f"1. Arquivo .env encontrado: {'‚úÖ' if os.path.exists('.env') else '‚ùå'}")
    print(f"2. OPENAI_API_KEY definida: {'‚úÖ' if api_key else '‚ùå'}")
    
    if api_key:
        print(f"3. Chave come√ßa com 'sk-': {'‚úÖ' if api_key.startswith('sk-') else '‚ùå'}")
        print(f"4. Tamanho da chave: {len(api_key)} caracteres")
        print(f"5. Modelo configurado: {model}")
        
        # Testar importa√ß√£o OpenAI
        try:
            from openai import OpenAI
            print("6. Biblioteca OpenAI: ‚úÖ Importada")
            
            # Testar cliente
            try:
                client = OpenAI(api_key=api_key)
                print("7. Cliente OpenAI: ‚úÖ Criado")
            except Exception as e:
                print(f"7. Cliente OpenAI: ‚ùå Erro: {e}")
                
        except ImportError as e:
            print(f"6. Biblioteca OpenAI: ‚ùå Erro: {e}")
    else:
        print("3. ‚ùå Chave n√£o encontrada")
        print("\nüí° SOLU√á√ÉO:")
        print("1. Crie um arquivo .env na raiz do projeto")
        print("2. Adicione: OPENAI_API_KEY=sk-sua-chave-aqui")
        print("3. Reinicie o servidor")
    
    print("\n" + "=" * 40)

if __name__ == "__main__":
    diagnosticar_openai()
